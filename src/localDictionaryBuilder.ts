import type { DictionaryWord } from "src/integrations/types";
import type DictionaryPlugin from "src/main";
import type DictionarySettings from "src/types";

import t from "src/l10n/helpers";
import { Notice } from "obsidian";

//This really needs a refactor

export default class LocalDictionaryBuilder {
    plugin: DictionaryPlugin;
    settings: DictionarySettings;

    constructor(plugin: DictionaryPlugin) {
        this.plugin = plugin;
        this.settings = plugin.settings;
    }

    private cap(string: string): string{
        const words = string.split(" ");

        return words.map((word) => {
            return word[0].toUpperCase() + word.substring(1);
        }).join(" ");
    }

    async newNote(content: DictionaryWord): Promise<void> {

        const {plugin, settings} = this;

        let phonetics = '';
        content.phonetics.forEach((value, i, a) => {
            phonetics += '- ' + value.text;
            if(i!=a.length-1){
                phonetics += '\n';
            }
        });

        let meanings = '';
        content.meanings.forEach((value) => {
            meanings += '### ' + this.cap(value.partOfSpeech) + '\n\n';
            value.definitions.forEach((def, j, b) => {
                meanings += def.definition+ '\n\n';
                if(def.example){
                    meanings += '> ' + def.example + '\n\n';
                }
                if(def.synonyms && def.synonyms.length!=0){
                    def.synonyms.forEach((syn, i, a) => {
                        meanings += syn;
                        if(i!=a.length-1){
                            meanings += ', ';
                        }
                    })
                    meanings += '\n\n'
                }
                if(j!=b.length-1){
                    meanings += '---\n\n';
                }
            });
        });
        
        let file;

        try {
            file = await plugin.app.vault.create(`${settings.folder ? settings.folder + '/': ''}${settings.prefix}${settings.capitalizedFileName ? this.cap(content.word) : content.word}${settings.suffix}.md`,
                settings.template
                    .replace('{{notice}}', t('Autogenerated by Obsidian Dictionary Plugin'))
                    .replace('{{word}}', settings.capitalizedFileName ? this.cap(content.word) : content.word)
                    .replace('{{pronunciationHeader}}', t('Pronunciation'))
                    .replace('{{phoneticList}}', phonetics)
                    .replace('{{meaningHeader}}', t('Meanings'))
                    .replace('{{meanings}}', meanings)
            );
            const leaf = plugin.app.workspace.splitActiveLeaf();
            leaf.openFile(file);
            plugin.app.workspace.setActiveLeaf(leaf);
        } catch (error) {
            console.error(error);
            new Notice(error)
        }
    }
}
